
from common import *
import numpy as np
import pickle
import xgboost
import sys

from sklearn.feature_selection import SelectKBest, f_regression, SelectFromModel, chi2
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,ExtraTreesClassifier
from sklearn.model_selection import train_test_split, GridSearchCV, KFold, cross_val_score
from sklearn.preprocessing import normalize
from sklearn.model_selection import KFold
from sklearn.metrics import log_loss
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
import scipy.sparse
from sklearn.metrics import confusion_matrix

import XGBModel

main_path = root_path

byte1g_matrix_path = os.path.join(main_path, byte1g_matrix_path)
byte1f_matrix_path = os.path.join(main_path, byte1f_matrix_path)
byte2g_matrix_path = os.path.join(main_path, byte2g_matrix_path)
byte3g_matrix_path = os.path.join(main_path, byte3g_matrix_path)
byte4g_matrix_path = os.path.join(main_path, byte4g_matrix_path)

# Byte 2gram
# print("Byte 2gram started")
# byte2g_matrix = np.load(byte2g_matrix_path)
# # byte2g_matrix = scipy.sparse.load_npz(byte2g_matrix_path)
# rfc = RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)
# sfm = SelectFromModel(rfc, threshold=2e-5)
# sfm.fit(byte2g_matrix, train_label)
# byte2g_imp_matrix = sfm.transform(byte2g_matrix)
# print(byte2g_imp_matrix.shape)
# del byte2g_matrix

# Byte 3gram
print("Byte 3gram started")
# byte3g_matrix = np.load(byte3g_matrix_path)
byte3g_matrix = scipy.sparse.load_npz(byte3g_matrix_path)
# byte3g_matrix = byte3g_matrix.todense()
# byte2g_matrix = scipy.sparse.load_npz(byte2g_matrix_path)
# rfc = RandomForestClassifier(n_estimators=1000, random_state=0, n_jobs=-1)
# sfm = SelectFromModel(rfc, threshold=2e-5)
# sfm.fit(byte3g_matrix, train_label)
# byte3g_imp_matrix = sfm.transform(byte3g_matrix)
# print(byte3g_imp_matrix.shape)
# del byte3g_matrix


# Byte 1gram
# print("Byte 1gram started")
# byte1g_matrix = np.load(byte1g_matrix_path)
# print(byte1g_matrix.shape)

# Byte 1gram entropy
# print("Byte 1gram entropy started")
# byte1f_matrix = np.load(byte1f_matrix_path)
# byte1f_matrix = byte1f_matrix.reshape(byte1f_matrix.shape[0], 1)
# print(byte1f_matrix.shape)

# final_train_matrix = byte3g_imp_matrix
final_train_matrix = byte3g_matrix


X_train, X_test, y_train, y_test = train_test_split(final_train_matrix, train_label, test_size=0.2, random_state=7)
print("Final training")

classifier = RandomForestClassifier(n_estimators=50, criterion='entropy', random_state=7)
classifier.fit(X_train, y_train)

# predict the test results
y_pred = classifier.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print("Accuracy:", acc)

cm = confusion_matrix(y_test, y_pred)
print(cm)
