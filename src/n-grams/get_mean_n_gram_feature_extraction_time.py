import pickle
import numpy as np
from itertools import zip_longest as zip
import matplotlib.pyplot as plt
import matplotlib
import os


spec_a_directory = "/home/sandeep/project_outputs/spec-a/"
spec_b_directory = "/home/sandeep/project_outputs/spec-b/"
spec_c_directory = "/home/sandeep/project_outputs/spec-c/"
n_grams = ["Header features", "1-gram", "2-gram", "3-gram"]
feature_extraction_methods = ["header_features", "1_gram", "2_gram", "3_gram"]


def get_total_extraction_time(directory):
    os.chdir(directory)
    final_extraction_times = []
    for item in feature_extraction_methods:
        all_extraction_times = []
        for filename in os.listdir(directory):
            if filename.startswith(item) and filename.endswith(".dat"):
                with open(filename, 'rb') as rfp:
                    extraction_times = pickle.load(rfp)
                    extraction_times = np.asarray(extraction_times, dtype=np.float32)
                    all_extraction_times.append(extraction_times)
        # Calculate extraction time per sample
        new_extraction_times = 1 / (np.sum(all_extraction_times) / 63628)
        final_extraction_times.append(new_extraction_times)
        all_extraction_times.clear()
    return final_extraction_times


total_extraction_times_spec_a = get_total_extraction_time(spec_a_directory)
total_extraction_times_spec_b = get_total_extraction_time(spec_b_directory)
total_extraction_times_spec_c = get_total_extraction_time(spec_c_directory)
xgboost_accuracies = [83.53, 77.69, 80.71, 78.92]
rf_accuracies = [83.29, 74.52, 78.85, 78.27]
knn_accuracies = [77.01, 67.84, 68.62, 68.36]

print(total_extraction_times_spec_a)
print(total_extraction_times_spec_b)
print(total_extraction_times_spec_c)


def subcategorybar(X, vals, width=0.8):
    n = len(vals)
    _X = np.arange(len(X))
    for i in range(n):
        plt.bar(_X - width/2. + i/float(n)*width, vals[i],
                width=width/float(n), align="edge")
    plt.xticks(_X, X)


# subcategorybar(n_grams, [total_extraction_times_spec_c, total_extraction_times_spec_b, total_extraction_times_spec_a])
# plt.xlabel("Feature Extraction Method")
# plt.ylabel("Malware Throughput (Malware per second)")
# legend = ['Spec. C', 'Spec. B', 'Spec. A']
# plt.legend(legend)
# plt.show()

subcategorybar(n_grams, [xgboost_accuracies, rf_accuracies, knn_accuracies])
plt.xlabel("Feature Extraction Method")
plt.ylabel("Classifier Accuracy (%)")
legend = ['XGBoost', 'Random Forest', 'k-NN']
plt.legend(legend)
plt.ylim(65, 85)
plt.show()

# for (a, b) in zip(n_grams, xgboost_accuracies):
#     plt.bar(a, b, color='cornflowerblue')
# plt.xlabel('Feature extraction method')
# plt.ylabel('Classification Accuracy (%)')
# plt.show()
