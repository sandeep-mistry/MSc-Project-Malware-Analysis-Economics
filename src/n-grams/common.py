# Common python file for all python codes
# Contains paths for everything and file operation functions

# Dependencies
import random
import os
import shutil
import Reader as r
import pandas as pd

# Delete path if exists
def deleteIfExists(filename):
    if os.path.exists(filename):
        os.remove(filename)
  
# Delete directory and create a new one  
def clearPath(dirPath):
    if os.path.exists(dirPath):
        shutil.rmtree(dirPath)
    os.makedirs(dirPath)

# Global paths
root_path = os.path.dirname(__file__)
train_dir = "train"
test_dir = "test"
numWorkers = 12

# These are subsets of opcodes and sections which have been found as most frequent
opcodeList = r.readCommaSeparatedFile("./opcode.txt")
DLLList = r.readCommaSeparatedFile("./dll.txt")
sectionList = r.readCommaSeparatedFile("./section.txt")

# Take subset of data (small classes are taken as whole)
# The only reason we do not just shuffle is that some classes have very few data points
# We want to take all data points of these classes.
train_asm =  [os.path.join(train_dir, f) for f in os.listdir(train_dir) if os.path.isfile(os.path.join(train_dir, f)) and f.endswith(".asm")]
random.seed(0)
class_subset_size = 900
#train_asm = random.sample(train_asm, subset_size)
label_data = pd.read_csv("trainLabels.csv")
labels = {row['Id']:row['Class'] for index, row in label_data.iterrows()}
# labels_tuple = [(row['Id'], row['Class']) for index, row in label_data.iterrows()]

# labelDict = {i:list() for i in range(0, 9)}

# for item in labels_tuple:
    # labelDict[int(item[1]) - 1].append(item[0])

# lastFiles = []
# for i in list(labelDict.keys()):
    # for j in labelDict[i][:class_subset_size]:
        # lastFiles.append(j)
        
# Generate paths from filenames
# train_asm = [os.path.join(train_dir, f) for f in lastFiles]
# train_asm = [i+".asm" for i in train_asm]

test_asm = [os.path.join(test_dir, f) for f in os.listdir(test_dir) if os.path.isfile(os.path.join(test_dir, f)) and f.endswith(".asm")]
test_bytes = [fn.split(".")[0]+".bytes" for fn in test_asm]

train_label = [labels[i.split(os.sep)[-1].split(".")[0]]-1 for i in train_asm]
train_bytes = [fn.split(".")[0]+".bytes" for fn in train_asm]

model_dir = "model"
feat_dir = "feat"
sample_submission_path = os.path.join(root_path, "sampleSubmission.csv")

# DLL paths
dll_feat_dir = os.path.join(feat_dir, "dll")
dll_matrix_path = os.path.join(model_dir, "dll_matrix.npy")
dll_feature_importance_path = os.path.join(root_path, "dll_imp_features")
dll_sfm_path = os.path.join(root_path, "dll_sfm")

# Opcode paths
opcode_feat_dir = os.path.join(feat_dir, "opcode")
opcode_feat_names = os.path.join(opcode_feat_dir, "feat_names")
opcode_matrix_path = os.path.join(model_dir, "opcode_matrix.npy")

# Sectionhist paths
sectionhist_feat_dir = os.path.join(feat_dir, "sectionHist")
section_feat_names = os.path.join(sectionhist_feat_dir, "feat_names")
section_matrix_path = os.path.join(model_dir, "section_matrix.npy")

# Stdcall paths
stdcall_cut_path = os.path.join(root_path, "stdcall_cut")
stdcall_feat_dir = os.path.join(feat_dir, "stdcall")
stdcall_feat_names = os.path.join(stdcall_feat_dir, "feat_names")
stdcall_matrix_path = os.path.join(model_dir, "stdcall_matrix.npy")
stdcall_feature_importance_path = os.path.join(root_path, "stdcall_imp_features")
stdcall_sfm_path = os.path.join(root_path, "stdcall_sfm")

# File length paths
length_feat_dir = os.path.join(feat_dir, "length")
length_matrix_dir = os.path.join(model_dir, "length_matrix.npy")

# Byte paths
byte_feat_dir = os.path.join(feat_dir, "byte")
byte1g_matrix_path = os.path.join(model_dir, "byte1g_matrix.npy")
byte1f_matrix_path = os.path.join(model_dir, "byte1f_matrix.npy")
byte2g_matrix_path = os.path.join(model_dir, "byte2g_matrix.npy")
byte4g_matrix_path = os.path.join(model_dir, "byte4g_matrix.npy")

# Byte image paths
byte_image_feat_dir = os.path.join(feat_dir, "image")
byte_image_matrix_path = os.path.join(model_dir, "byte_image_matrix.npy")

# Important features paths
byte2g_imp_feature_path = os.path.join(model_dir, "byte2g_imp_feature")
opcode_imp_feature_path = os.path.join(model_dir, "opcode_imp_feature")
byte1g_imp_feature_path = os.path.join(model_dir, "byte1g_imp_feature")
stdcall_imp_feature_path = os.path.join(model_dir, "stdcall_imp_feature")
dll_imp_feature_path = os.path.join(model_dir, "dll_imp_feature")

final_classifier_path = os.path.join(root_path, "final_classifier")

# Selected features paths
selected_features_path = os.path.join(root_path, "selected_features")
